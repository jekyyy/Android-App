<?xml version="1.0" encoding="utf-8"?>
<resources>
        <string name="Abstraction">
        "Abstraction is the process of taking away or removing characteristics from something in order to reduce it to a set of essential characteristics. In object-oriented programming, abstraction is one of three central principles (along with encapsulation and inheritance). Through the process of abstraction, a programmer hides all but the relevant data about an object in order to reduce complexity and increase efficiency. In the same way that abstraction sometimes works in art, the object that remains is a representation of the original, with unwanted detail omitted. The resulting object itself can be referred to as an abstraction, meaning a named entity made up of selected attributes and behaviour specific to a particular usage of the originating entity. Abstraction is related to both encapsulation and data hiding.


In the process of abstraction, the programmer tries to ensure that the entity is named in a manner that will make sense and that it will have all the relevant aspects included and none of the extraneous ones. A real-world analogy of abstraction might work like this: You (the object) are arranging to meet a blind date and are deciding what to tell them so that they can recognize you in the restaurant. You decide to include the information about where you will be located, your height, hair colour, and the colour of your jacket. This is all data that will help the procedure (your date finding you) work smoothly. You should include all that information.


Abstraction is one of the most important principles in object-oriented software engineering and is closely related to several other important concepts, including encapsulation, inheritance and polymorphism.
Abstraction is applied in the process of identifying software artifacts (objects) to model the problem domain. It is the process of reducing these objects to their essence such that only the necessary elements are represented. Abstraction defines an object in terms of its properties, functionality, and interface (means of communicating with other objects).
These methods are used to reduce the complexity of the design and implementation process of software. In that process, the designers define abstract object actors that are able to perform work, change their state and communicate with other actors. The state of the object is encapsulated while the detailed data structures associated with the object are kept behind the scenes."


    </string>
    <string name="Polymorphism">
        "Definiton
Polymorphism is an object-oriented programming concept that refers to the ability of a variable, function or object to take on multiple forms. A language that features polymorphism allows developers to program in the general rather than program in the specific.

First, let us define two useful terms: subtype and supertype. A class defines a type. A type defined by a subclass is called a subtype, and a type defined by its superclass is called a supertype. Therefore, you can say that Circle is a subtype of GeometricObject and GeometricObject is a supertype for Circle.

The inheritance relationship enables a subclass to inherit features from its superclass with additional new features. A subclass is a specialization of its superclass; every instance of a subclass is also an instance of its superclass, but not vice versa. For example, every circle is a geometric object, but not every geometric object is a circle. Therefore, you can always pass an instance of a subclass to a parameter of its superclass type. In a programming language that exhibits polymorphism, objects of classes belonging to the same hierarchical tree (inherited from a common base class) may possess functions bearing the same name, but each having different behaviours.

As an example, assume there is a base class named Animals from which the subclasses Horse, Fish and Bird are derived. Also assume that the Animals class has a function named Move, which is inherited by all subclasses mentioned. With polymorphism, each subclass may have its own way of implementing the function. So, for example, when the Move function is called in an object of the Horse class, the function might respond by displaying trotting on the screen. On the other hand, when the same function is called in an object of the Fish class, swimming might be displayed on the screen. In the case of a Bird object, it may be flying.

In effect, polymorphism cuts down the work of the developer because he can now create a general class with all the attributes and behaviours that he envisions for it. When the time comes for the developer to create more specific subclasses with certain unique attributes and behaviors, the developer can simply alter code in the specific portions where the behaviours differ. All other portions of the code can be left as is.


."
    </string>
    <string name="Inheritance">
        "Definition
Inheritance is a mechanism wherein a new class is derived from an existing class. In Java, classes may inherit or acquire the properties and methods of other classes. Inheritance is an important and powerful feature for reusing software. Suppose you need to define classes to model circles, rectangles, and triangles. These classes have many common features. What is the best way to design these classes so as to avoid redundancy and make the system easy to comprehend and easy to maintain? The answer is to use inheritance.

A class derived from another class is called a subclass, whereas the class from which a subclass is derived is called a superclass. A subclass can have only one superclass, whereas a superclass may have one or more subclasses. Contrary to the conventional interpretation, a subclass is not a subset of its superclass. In fact, a subclass usually contains more information and methods than its superclass.

Private data fields in a superclass are not accessible outside the class. Therefore, they cannot be used directly in a subclass. They can, however, be accessed/mutated through public accessors/mutators if defined in the superclass. Not all is-a relationships should be modelled using inheritance. For example, a square is a rectangle, but you should not extend a Square class from a Rectangle class, because the width and height properties are not appropriate for a square. Instead, you should define a Square class to extend the GeometricObject class and define the side property for the side of a square.

Inheritance is used to model the is-a relationship. Do not blindly extend a class just for the sake of reusing methods. For example, it makes no sense for a Tree class to extend a Person class, even though they share common properties such as height and weight. A subclass and its superclass must have the is-a relationship.

Some programming languages allow you to derive a subclass from several classes. This capability is known as multiple inheritance. Java, however, does not allow multiple inheritance. A Java class may inherit directly from only one superclass. This restriction is known as single inheritance. If you use the extends keyword to define a subclass, it allows only one parent class.
."
    </string>
    <string name="Encapsulation">
        "Encapsulation in Java is the inclusion of all methods and variables needed for a Java object to function, contained within the object itself. Encapsulation, along with abstraction, polymorphism and inheritance, is one of the four key concepts in object oriented programming (OOP). Encapsulation is similar across object-oriented languages.


In OOP, objects are the first things a programmer considers when designing a program. They are also the units of code that are eventually derived from the process and what actually runs in the computer system. Each object is an instance of a particular class or subclass with the class's own methods and variables.

Java offers four different "scope" realms--public, protected, private, and package--that can be used to selectively hide data constructs. To achieve encapsulation, the programmer declares the class variables as “private” and then provides what are called public “setter and getter” methods which make it possible to view and modify the variables. A Java object publishes its interfaces, which consist of public methods and instantiated data, enabling other objects to interact with it without the object’s inner workings being revealed. Data hiding ensures that someone maintaining the code can’t inadvertently point to or access the wrong data. Programmers creating objects to interact with existing objects need not know how the encapsulated code works specifically, just how to use its interface.

A class should use the private modifier to hide its data from direct access by clients. This makes the class easy to maintain.
Provide a getter method only if you want the data field to be readable, and provide a setter method only if you want the data field to be updateable. For example, the Rational class provides a getter method for numerator and denominator, but no setter method, because a Rational object is immutable.
."
    </string>
    <string name="OOP">
        Defining Classes for Objects
In Object-oriented programming (OOP), we use objects. An object represents an entity in the real world that can be distinctly identified. An object can be a lecturer, a door, a cup, a pen. Every object has a unique state, identity and behaviour. Objects of the same type are defined using a common class. A class is a blueprint that defines what an object’s data fields and methods will be. An object is an instance of a class.

A Java class uses variables to define data fields and methods to define actions. A class provides methods of a special type, known as constructors, which are invoked to create a new object. A constructor can perform any action, and they are used to perform initialising actions, such as initialising the data fields of objects.

Constructing Objects Using Constructors
Constructors are a special type of method. They must have the same name as the class itself, they do not have a return type – not even void, and they are invoked using the new operator when an object is created. Constructors play the role of initialising objects. The constructor has exactly the same name as its defining class. Like regular methods, constructors can be overloaded (multiple constructors can have the same name but different signatures), making it easy to construct objects with different initial data values.

Accessing Objects via Reference Variables
Newly created objects are allocated in the memory. They can be accessed via reference variables. These variables contain references to the objects. A class is a reference type; that means that a variable of the class type can reference an instance of the class. An object’s member refers to its data fields and methods. After an object is created, its data can be accessed, and its methods can be invoked using the dot operator (.). It is also known as the object member access operator. Every variable represents a memory location that holds a value. When you declare a variable, you are telling the compiler what type of value the variable can hold. For a variable of a primitive type, the value is of the primitive type.

Static Variables, Constants, and Methods
The data field radius in the circle class is known as an instance variable. An instance variable is tied to a specific instance of the class; it is not shared among objects of the same class. If you want all the instances of a class to share data, use static variables. They store values for the variables in a common memory location. If one object changes the value of a static variable, all objects of the same class are affected.

Visibility Modifiers
The public visibility modifier for classes, methods, and data fields are used to denote that they can be accessed from any other classes. If no visibility modifier is used, then by default the classes, methods, and data fields are accessible by any class in the same package. We also have the private and protected modifiers for class members. The private modifier makes methods and data fields accessible only from within its own class. The protected modifier is used to enable the members of the class to be accessed by the subclasses in any package or classes in the same package.

    </string>
    <string name="Attributes">
        "The object-oriented programming approach organises programs in a way that mirrors the real world, where all objects are associated with both attributes and activities. Using objects improves software reusability and makes programs easier to develop and easier to maintain. Attributes allow checking of functions to take place. The state of an object, or its properties or attributes are represented by data fields with their current values. A circle object has a data field radius. A rectangle object has the data fields width and height. Again, these are the properties of an object.

Examples of Attributes
Examples of attributes for a person would be name, age, height, eye colour and hair colour. Let's create a theoretical class called Motorcycle. A motorcycle class might include the following attributes and have these typical values: colour style and make. Attributes of an object can also include information about its state; for example, you could have features for engine condition (off or on) or current gear selected.Attributes are defined in classes by variables. Those variables' types and names are defined in the class, and each object can have its own values for those variables. Because each instance of a class can have different values for its variables, these variables are often called instance variables.

Instance Variables
Instance variables may be initially set when an object is created and stay constant throughout the life of the object, or they may be able to change at will as the program runs. Change the value of the variable, and you change an object's attributes. In addition to instance variables, there are also class variables, which apply to the class itself and to all its instances. Unlike instance variables, whose values are stored in the instance, class variables' values are stored in the class itself."


    </string>
    <string name="Methods">
        "Every object has behaviours. That is, an object has a certain set of actions that it can perform. The behaviour of an object is defined by the set of methods which can be applied on it. The behaviour of an object (also known as its actions) is defined by methods. To invoke a method on an object is to ask the object to perform an action. For example, you may define methods named getArea() and getPerimeter() for circle objects. A circle object may invoke getArea() to return its area and getPerimeter() to return its perimeter. You may also define the setRadius(radius) method. A circle object can invoke this method to change its radius. Different classes may have some com- mon properties and behaviors, which can be generalized in a class that can be shared by other classes. You can define a specialized class that extends the generalized class. The specialized classes inherit the properties and methods from the general class.

Behaviours
Every object has behaviours. That is, an object has a certain set of actions that it can perform. The behaviour of an object is defined by the set of methods which can be applied on it. The behaviour of an object (also known as its actions) is defined by methods. To invoke a method on an object is to ask the object to perform an action. For example, you may define methods named getArea() and getPerimeter() for circle objects. A circle object may invoke getArea() to return its area and getPerimeter() to return its perimeter. You may also define the setRadius(radius) method. A circle object can invoke this method to change its radius. Different classes may have some com- mon properties and behaviors, which can be generalized in a class that can be shared by other classes. You can define a specialized class that extends the generalized class. The specialized classes inherit the properties and methods from the general class."

    </string>
</resources>